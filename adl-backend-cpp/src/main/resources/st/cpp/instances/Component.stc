template st.cpp.instances.Component : st.cpp.common.ComponentHelper
implements st.cpp.instances.ComponentInstances{

st.cpp.membrane.ControllerGenerator ctrlGenerator = plugin(st.cpp.membrane);

$${

isClient ::= [ "client" : "true" ]
isServer ::= [ "server" : "true" ]

ComponentInstances(topLevelDefinition, definition, instances) ::= <<
/* Generated file: <topLevelDefinition;format="nameToPath">_<definition.name;format="toCName">_instances.cpp */

#include "<definition.name;format="nameToPath">.adl.hpp"
#include "<topLevelDefinition.name;format="nameToPath">.adl.hpp"

//using namespace __ns_<topLevelDefinition.name;format="toCName">;

/* Need topLevel for initialization of the singleton reference */
//extern <topLevelDefinition.name; format="toCName">Definition __component_toplevel;

/* ComponentInstances */
//<if (definition.astDecorations.("is-singleton"))>
//<definition.name;format="toCName">Definition* <definition.name;format="toCName">Singleton = &(__component_toplevel<first(instances).decorations.("nameInParent")>);
//<endif>

//>>

TopLevelInstances(topLevelDefinition, definitions, instances) ::= <<
/* Generated file: <topLevelDefinition;format="nameToPath">_<definition.name;format="toCName">_instances.cpp */

//#include "<topLevelDefinition.name;format="nameToPath">.adl.hpp"

//using namespace __ns_<topLevelDefinition.name;format="toCName">;

/* TopLevelInstance(s) */
//<topLevelDefinition.name; format="toCName">Definition __component_toplevel;

>>

}$$

}